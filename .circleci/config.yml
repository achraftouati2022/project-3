version: 2.1

orbs:
  slack: circleci/slack@4.12.1
commands:
  
  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
           name: Install AWS CLI
           command: |
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  unzip awscliv2.zip
                  sudo ./aws/install
                  
  install_nodejs:
    description: Install Node.js 14
    steps:
      - run:
           name: Install Node.js 14
           command: |
                  curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                  sudo apt install -y nodejs
                  
  install_ansible:
   description: Install Ansible
   steps:
    - run:
         name: Install Ansible
         command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y
             
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/FJrbgWktYMFJKe3okAUNZ/migration_<< parameters.workflow_id >>")
            if (( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
            #  Add revert code here. You can find this in the Getting Started section.
             npm run migration:revert
            fi
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
         name: Run frontend test
         command: |
           cd frontend
           npm install
           npm run test
      - save_cache:
         paths: [frontend/node_modules]
         key: frontend test
      
          
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
         name: Run backend test
         command: |
           cd backend
           npm install
           npm run test
      - save_cache:
         paths: [backend/node_modules]
         key: backend-test
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      #npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      #npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
          
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # Install tar and gzip
      - run:
         name: Install dependencies
         command: |
          yum install -y tar gzip    
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
          
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "70:8b:ef:d5:43:f3:ca:fa:15:e3:03:82:39:fd:2a:49"
      # attach workspace
      - attach_workspace:
          at: ~/
          
      - install_ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m  
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/FJrbgWktYMFJKe3okAUNZ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
           fingerprints:
            - "70:8b:ef:d5:43:f3:ca:fa:15:e3:03:82:39:fd:2a:49"
      - attach_workspace:
          at: ~/
      - install_ansible  
      - install_awscli
      - install_nodejs
      - run:
          name: Get backend url
          command: |
                export BACKEND_IP=$(aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --filter "Name=tag:Name,Values=backend-${CRICLE_WORKFLOW_ID:0:7}" \
                --output text)
                export API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
                cd frontend
                sudo npm install -g npm@latest
                rm -rf node_modules
                npm install
                npm run build
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
   docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "70:8b:ef:d5:43:f3:ca:fa:15:e3:03:82:39:fd:2a:49"
      # attach workspace
      - attach_workspace:
          at: ~/
      - install_ansible  
      - install_awscli
      - install_nodejs
      - run:
          name: Deploy backend
          command: |
                cd backend
                  
                npm i
                npm run build 
                cd ..
                cd .circleci/ansible
                mkdir files
                cd files
                tar -C ../../../backend -cvzf artifact.tar.gz .
                cd ../
                echo "Content of the inventory.txt is -----------"
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${BACKEND_IP}
            
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"
            echo "Sleeping for 1 minute"
            sleep 60
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi 
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi 
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image:  cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: cat ~/project/OldWorkflowID.txt
            echo CurrentWorflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            cat ~/project/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
            else
              echo "Stack is the latest"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]